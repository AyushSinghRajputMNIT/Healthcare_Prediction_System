1.	Set Up and Configure Server:
1.1.	Import necessary modules (e.g., express, mongoose, dotenv, path, and security libraries).
1.2.	Load environment variables using dotenv.
2.	Middleware Configuration:
2.1.	Body Parsing: Use bodyParser.json() to parse incoming JSON request bodies.
2.2.	Rate Limiting: Set a rate limit to protect against DoS attacks, allowing only a maximum of 100 requests per hour per IP address.
2.3.	Data Sanitization:
2.3.1.	Use mongoSanitize() to prevent NoSQL injections.
2.3.2.	Use xss() to sanitize data from cross-site scripting (XSS) attacks.
2.4.	HTTP Parameter Pollution Prevention: Use hpp() to prevent HTTP parameter pollution.
2.5.	Session Management:
2.5.1.	 Configure sessions using express-session with MongoDBStore to persist sessions in MongoDB.
2.5.2.	 Store session data securely using a session secret from environment variables and set a 1-hour expiration.
3.	Set Up Routes:
3.1.	API Routes:
3.1.1.	 /api/users: Route for handling user-related requests, handled in userRoutes.
3.1.2.	 /api/health: Route for health metrics and predictions, handled in healthRoutes.
3.1.3.	 /api/admin: Route for admin functionalities, handled in adminRoutes.
3.2.	Static File Serving: Serve static frontend files from the frontend folder.
3.3.	HTML Routes: Serve HTML pages (index.html, login.html, register.html, profile.html) for specific paths by sending files from the frontend folder.
4.	Database Connection:
4.1.	Connect to MongoDB using the connection URI in environment variables. Log a success message if connected, or catch and log any errors.
5.	Start the Server:
5.1.	Define the server port from environment variables or default to 5000.
5.2.	Start the server and log the port where itâ€™s running.
